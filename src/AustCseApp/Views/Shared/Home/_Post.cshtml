@model Post

@{
    TimeSpan timeSpanSincePosted = DateTime.UtcNow.Subtract(Model.DateCreated);

    string displayTime = timeSpanSincePosted switch
    {
        var t when t.TotalDays >= 1 => $"{(int)t.TotalDays}d ago",
        var t when t.TotalHours >= 1 => $"{(int)t.TotalHours}h ago",
        var t when t.TotalMinutes >= 1 => $"{(int)t.TotalMinutes}m ago",
        _ => "Just now"
    };
}

<div class="bg-white rounded-xl shadow-sm text-sm font-medium border1">

    @* Post heading *@
    <div class="flex gap-3 sm:p-4 p-2.5 text-sm font-medium">
        <a>
            <img src="@(string.IsNullOrWhiteSpace(Model.User?.ProfilePictureUrl)
                             ? Url.Content("~/images/avatar/user.png")
                             : Model.User!.ProfilePictureUrl)"
                 alt="@((Model.User?.FullName) ?? "Unknown User")"
                 class="w-9 h-9 rounded-full" />
        </a>

        <div class="flex-1">
            <a>
                <h4 class="text-black">@((Model.User?.FullName) ?? "Unknown User")</h4>

                <!-- meta: time • batch -->
                <div class="text-xs text-gray-500/80 flex items-center gap-2">
                    <span title="@Model.DateCreated.ToString("mm/dd/yyyy HH:mm")">@displayTime</span>
                    <span class="w-1 h-1 rounded-full bg-gray-300"></span>
                    @if (!string.IsNullOrWhiteSpace(Model.Batch))
                    {
                        <span class="w-1 h-1 rounded-full bg-gray-300"></span>
                        <span class="text-gray-600">Batch: @Model.Batch</span>
                    }
                </div>

                <!-- tags (chips) -->
                <div class="mt-1.5 flex flex-wrap gap-1.5">
                    <span class="px-2 py-0.5 rounded-full text-[11px] bg-sky-50 text-sky-700 border border-sky-100">@Model.Tag</span>
                </div>
            </a>
        </div>

        <div class="-mr-1">
            <button type="button" class="button-icon w-8 h-8"> <ion-icon class="text-xl" name="ellipsis-horizontal"></ion-icon> </button>
            <div class="w-[245px]" uk-dropdown="pos: bottom-right; animation: uk-animation-scale-up uk-transform-origin-top-right; animate-out: true; mode: click">
                <form>
                    <input type="hidden" name="postId" />
                    <button type="submit" class="hover:!bg-red-50 icon-link">
                        <ion-icon name="lock-closed-outline"></ion-icon>  Set as private
                    </button>
                </form>

                <hr>
                <form asp-controller="Home" asp-action="Delete">
                    <input type="hidden" name="postId" />
                    <button type="submit" class="text-red-400 hover:!bg-red-50 icon-link">
                        <ion-icon name="trash-bin-outline"></ion-icon>  Delete Post
                    </button>
                </form>
                <form asp-controller="Home" asp-action="Report">
                    <input type="hidden" name="postId" />
                    <button type="submit" class="hover:!bg-red-50 icon-link">
                        <ion-icon class="text-xl shrink-0" name="flag-outline"></ion-icon>  Report
                    </button>
                </form>
            </div>
        </div>

    </div>

    @* Post content text *@
    <div class="sm:px-4 p-2.5 pt-0 w-full">
        <p class="font-normal ">
            @Model.Content
        </p>
    </div>

    @* Post image  *@
    @if (!string.IsNullOrEmpty(Model.ImageUrl))
    {
        <a>
            <div class="relative w-full lg:h-96 h-full sm:px-4">
                <img src="@Model.ImageUrl" class="sm:rounded-lg w-full h-full object-cover" />
            </div>
        </a>
    }

    @* Icons *@
    <div class="sm:p-4 p-2.5 flex items-center gap-4 text-xs font-semibold">

        <div class="flex items-center gap-2.5">
            <form asp-controller="Home" asp-action="TogglePostLike">
                <input type="hidden" name="postId" value="@Model.Id"/>
                <button type="submit" class="button-icon @(Model.Likes.Any(n => n.UserId == 1) ? "text-red-500 bg-red-100" : "")">
                    <ion-icon class="text-lg"
                              name="@(Model.Likes.Any(n => n.UserId == 1) ? "heart" : "heart-outline")"></ion-icon>
                </button>
            </form>
            <a href="#">@Model.Likes.Count</a>
        </div>

        <div class="flex items-center gap-3">
            <a class="button-icon">
                <ion-icon class="text-lg" name="chatbubble-ellipses-outline"></ion-icon>
            </a>
            <a href="#">5</a>
        </div>

        <div class="ml-auto"></div>

        <div>
            <a class="button-icon ml-auto">
                <ion-icon class="text-lg" name="bookmark-outline"></ion-icon>
            </a>
        </div>
    </div>

    @* Add comment *@
    <div>
        <div class="sm:px-4 sm:py-3 p-2.5 border-t border-gray-100 flex items-center gap-1">
            <img src="~/images/avatar/user.png" class="w-6 h-6 rounded-full" />

            <div class="flex-1 relative overflow-hidden h-10">
                <textarea placeholder="Add Comment...." rows="1" class="w-full resize-none !bg-transparent px-4 py-2 focus:!border-transparent focus:!ring-transparent"></textarea>
            </div>

            <button class="text-sm rounded-full py-1.5 px-3.5 bg-secondery">Comment</button>

        </div>
    </div>

</div>